/* tslint:disable */
/* eslint-disable */
/**
 * Task scheduling system
 * Task scheduling system
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomUserAuth,
  CustomUserLogin,
  JWT,
  PaginatedSocialAccountList,
  PasswordChange,
  PatchedCustomUserAuth,
  Register,
  ResendEmailVerification,
  RestAuthDetail,
  SocialConnect,
  SocialLogin,
  VerifyEmail,
} from '../models';
import {
    CustomUserAuthFromJSON,
    CustomUserAuthToJSON,
    CustomUserLoginFromJSON,
    CustomUserLoginToJSON,
    JWTFromJSON,
    JWTToJSON,
    PaginatedSocialAccountListFromJSON,
    PaginatedSocialAccountListToJSON,
    PasswordChangeFromJSON,
    PasswordChangeToJSON,
    PatchedCustomUserAuthFromJSON,
    PatchedCustomUserAuthToJSON,
    RegisterFromJSON,
    RegisterToJSON,
    ResendEmailVerificationFromJSON,
    ResendEmailVerificationToJSON,
    RestAuthDetailFromJSON,
    RestAuthDetailToJSON,
    SocialConnectFromJSON,
    SocialConnectToJSON,
    SocialLoginFromJSON,
    SocialLoginToJSON,
    VerifyEmailFromJSON,
    VerifyEmailToJSON,
} from '../models';

export interface AuthGithubConnectCreateRequest {
    socialConnect?: SocialConnect;
}

export interface AuthGithubCreateRequest {
    socialLogin?: SocialLogin;
}

export interface AuthGoogleConnectCreateRequest {
    socialConnect?: SocialConnect;
}

export interface AuthGoogleCreateRequest {
    socialLogin?: SocialLogin;
}

export interface AuthLoginCreateRequest {
    customUserLogin: CustomUserLogin;
}

export interface AuthPasswordChangeCreateRequest {
    passwordChange: PasswordChange;
}

export interface AuthRegistrationConfirmEmailCreateRequest {
    verifyEmail: VerifyEmail;
}

export interface AuthRegistrationCreateRequest {
    register: Register;
}

export interface AuthRegistrationResendEmailCreateRequest {
    resendEmailVerification: ResendEmailVerification;
}

export interface AuthSocialaccountsDisconnectCreateRequest {
    id: number;
    socialConnect?: SocialConnect;
}

export interface AuthSocialaccountsListRequest {
    limit?: number;
    offset?: number;
}

export interface AuthUserPartialUpdateRequest {
    patchedCustomUserAuth?: PatchedCustomUserAuth;
}

export interface AuthUserUpdateRequest {
    customUserAuth: CustomUserAuth;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Functions similar to GithubLoginView, but will link a Github account to an existing system account instead of creating a new account.
     */
    async authGithubConnectCreateRaw(requestParameters: AuthGithubConnectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SocialConnect>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/github/connect/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SocialConnectToJSON(requestParameters.socialConnect),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SocialConnectFromJSON(jsonValue));
    }

    /**
     * Functions similar to GithubLoginView, but will link a Github account to an existing system account instead of creating a new account.
     */
    async authGithubConnectCreate(requestParameters: AuthGithubConnectCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SocialConnect> {
        const response = await this.authGithubConnectCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Receive code from user, send code to Github in exchange for an access token. Send access token to Github to retrieve Github account email for use in authentication or account registration.
     */
    async authGithubCreateRaw(requestParameters: AuthGithubCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWT>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/github/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SocialLoginToJSON(requestParameters.socialLogin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTFromJSON(jsonValue));
    }

    /**
     * Receive code from user, send code to Github in exchange for an access token. Send access token to Github to retrieve Github account email for use in authentication or account registration.
     */
    async authGithubCreate(requestParameters: AuthGithubCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWT> {
        const response = await this.authGithubCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Functions similar to GoogleLoginView, but will link a Google account to an existing system account instead of creating a new account.
     */
    async authGoogleConnectCreateRaw(requestParameters: AuthGoogleConnectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SocialConnect>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/google/connect/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SocialConnectToJSON(requestParameters.socialConnect),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SocialConnectFromJSON(jsonValue));
    }

    /**
     * Functions similar to GoogleLoginView, but will link a Google account to an existing system account instead of creating a new account.
     */
    async authGoogleConnectCreate(requestParameters: AuthGoogleConnectCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SocialConnect> {
        const response = await this.authGoogleConnectCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Receive code from user, send code to Google in exchange for an access token. Send access token to Google to retrieve Google account email for use in authentication or account registration.
     */
    async authGoogleCreateRaw(requestParameters: AuthGoogleCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWT>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/google/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SocialLoginToJSON(requestParameters.socialLogin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTFromJSON(jsonValue));
    }

    /**
     * Receive code from user, send code to Google in exchange for an access token. Send access token to Google to retrieve Google account email for use in authentication or account registration.
     */
    async authGoogleCreate(requestParameters: AuthGoogleCreateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWT> {
        const response = await this.authGoogleCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework.  Accept the following POST parameters: email, password  Return the REST Framework Token Object\'s key.
     */
    async authLoginCreateRaw(requestParameters: AuthLoginCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWT>> {
        if (requestParameters.customUserLogin === null || requestParameters.customUserLogin === undefined) {
            throw new runtime.RequiredError('customUserLogin','Required parameter requestParameters.customUserLogin was null or undefined when calling authLoginCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomUserLoginToJSON(requestParameters.customUserLogin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTFromJSON(jsonValue));
    }

    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework.  Accept the following POST parameters: email, password  Return the REST Framework Token Object\'s key.
     */
    async authLoginCreate(requestParameters: AuthLoginCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWT> {
        const response = await this.authLoginCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     */
    async authLogoutCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestAuthDetail>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/logout/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestAuthDetailFromJSON(jsonValue));
    }

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     */
    async authLogoutCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestAuthDetail> {
        const response = await this.authLogoutCreateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     */
    async authPasswordChangeCreateRaw(requestParameters: AuthPasswordChangeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestAuthDetail>> {
        if (requestParameters.passwordChange === null || requestParameters.passwordChange === undefined) {
            throw new runtime.RequiredError('passwordChange','Required parameter requestParameters.passwordChange was null or undefined when calling authPasswordChangeCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/password/change/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordChangeToJSON(requestParameters.passwordChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestAuthDetailFromJSON(jsonValue));
    }

    /**
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     */
    async authPasswordChangeCreate(requestParameters: AuthPasswordChangeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestAuthDetail> {
        const response = await this.authPasswordChangeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authRegistrationConfirmEmailCreateRaw(requestParameters: AuthRegistrationConfirmEmailCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestAuthDetail>> {
        if (requestParameters.verifyEmail === null || requestParameters.verifyEmail === undefined) {
            throw new runtime.RequiredError('verifyEmail','Required parameter requestParameters.verifyEmail was null or undefined when calling authRegistrationConfirmEmailCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/registration/confirm-email/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailToJSON(requestParameters.verifyEmail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestAuthDetailFromJSON(jsonValue));
    }

    /**
     */
    async authRegistrationConfirmEmailCreate(requestParameters: AuthRegistrationConfirmEmailCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestAuthDetail> {
        const response = await this.authRegistrationConfirmEmailCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new system account with credentials provided by the user.  Accepts username, email, password and retyped password.  Returns the REST Framework Token Object\'s key.
     */
    async authRegistrationCreateRaw(requestParameters: AuthRegistrationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JWT>> {
        if (requestParameters.register === null || requestParameters.register === undefined) {
            throw new runtime.RequiredError('register','Required parameter requestParameters.register was null or undefined when calling authRegistrationCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/registration/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterToJSON(requestParameters.register),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTFromJSON(jsonValue));
    }

    /**
     * Create a new system account with credentials provided by the user.  Accepts username, email, password and retyped password.  Returns the REST Framework Token Object\'s key.
     */
    async authRegistrationCreate(requestParameters: AuthRegistrationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JWT> {
        const response = await this.authRegistrationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authRegistrationResendEmailCreateRaw(requestParameters: AuthRegistrationResendEmailCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestAuthDetail>> {
        if (requestParameters.resendEmailVerification === null || requestParameters.resendEmailVerification === undefined) {
            throw new runtime.RequiredError('resendEmailVerification','Required parameter requestParameters.resendEmailVerification was null or undefined when calling authRegistrationResendEmailCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/registration/resend-email/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResendEmailVerificationToJSON(requestParameters.resendEmailVerification),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestAuthDetailFromJSON(jsonValue));
    }

    /**
     */
    async authRegistrationResendEmailCreate(requestParameters: AuthRegistrationResendEmailCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestAuthDetail> {
        const response = await this.authRegistrationResendEmailCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disconnect SocialAccount from remote service for the currently logged in user
     */
    async authSocialaccountsDisconnectCreateRaw(requestParameters: AuthSocialaccountsDisconnectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling authSocialaccountsDisconnectCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/socialaccounts/{id}/disconnect/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SocialConnectToJSON(requestParameters.socialConnect),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Disconnect SocialAccount from remote service for the currently logged in user
     */
    async authSocialaccountsDisconnectCreate(requestParameters: AuthSocialaccountsDisconnectCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authSocialaccountsDisconnectCreateRaw(requestParameters, initOverrides);
    }

    /**
     * List SocialAccounts for the currently logged in user
     */
    async authSocialaccountsListRaw(requestParameters: AuthSocialaccountsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSocialAccountList>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/socialaccounts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSocialAccountListFromJSON(jsonValue));
    }

    /**
     * List SocialAccounts for the currently logged in user
     */
    async authSocialaccountsList(requestParameters: AuthSocialaccountsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSocialAccountList> {
        const response = await this.authSocialaccountsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, full_name  Default display fields: pk, username, email, full_name  Read-only fields: pk, email  Returns UserModel fields.
     */
    async authUserPartialUpdateRaw(requestParameters: AuthUserPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomUserAuth>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/user/`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCustomUserAuthToJSON(requestParameters.patchedCustomUserAuth),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomUserAuthFromJSON(jsonValue));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, full_name  Default display fields: pk, username, email, full_name  Read-only fields: pk, email  Returns UserModel fields.
     */
    async authUserPartialUpdate(requestParameters: AuthUserPartialUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomUserAuth> {
        const response = await this.authUserPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, full_name  Default display fields: pk, username, email, full_name  Read-only fields: pk, email  Returns UserModel fields.
     */
    async authUserRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomUserAuth>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomUserAuthFromJSON(jsonValue));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, full_name  Default display fields: pk, username, email, full_name  Read-only fields: pk, email  Returns UserModel fields.
     */
    async authUserRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomUserAuth> {
        const response = await this.authUserRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, full_name  Default display fields: pk, username, email, full_name  Read-only fields: pk, email  Returns UserModel fields.
     */
    async authUserUpdateRaw(requestParameters: AuthUserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomUserAuth>> {
        if (requestParameters.customUserAuth === null || requestParameters.customUserAuth === undefined) {
            throw new runtime.RequiredError('customUserAuth','Required parameter requestParameters.customUserAuth was null or undefined when calling authUserUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtHeaderAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/auth/user/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomUserAuthToJSON(requestParameters.customUserAuth),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomUserAuthFromJSON(jsonValue));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, full_name  Default display fields: pk, username, email, full_name  Read-only fields: pk, email  Returns UserModel fields.
     */
    async authUserUpdate(requestParameters: AuthUserUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomUserAuth> {
        const response = await this.authUserUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
